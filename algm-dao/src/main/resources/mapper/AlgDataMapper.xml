<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.beyond.algm.mapper.AlgDataMapper" >
  <resultMap id="BaseResultMap" type="com.beyond.algm.model.AlgData" >
    <id column="data_sn" property="dataSn" jdbcType="VARCHAR" />
    <result column="data_set_sn" property="dataSetSn" jdbcType="VARCHAR" />
    <result column="usr_sn" property="usrSn" jdbcType="VARCHAR" />
    <result column="data_name" property="dataName" jdbcType="VARCHAR" />
    <result column="data_en_name" property="dataEnName" jdbcType="VARCHAR" />
    <result column="creat_time" property="creatTime" jdbcType="TIMESTAMP" />
    <result column="data_size" property="dataSize" jdbcType="VARCHAR" />
    <result column="data_addr" property="dataAddr" jdbcType="VARCHAR" />
    <result column="data_loc" property="dataLoc" jdbcType="VARCHAR" />
    <result column="is_open_src" property="isOpenSrc" jdbcType="VARCHAR" />
    <result column="data_abs" property="dataAbs" jdbcType="VARCHAR" />
    <result column="data_content" property="dataContent" jdbcType="VARCHAR" />
    <result column="data_credit" property="dataCredit" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="DifDataResultMap" type="com.beyond.algm.vo.AlgDifDataListVo">
    <result column="data_name" property="dataName" jdbcType="VARCHAR" />
    <result column="data_addr" property="dataAddr" jdbcType="VARCHAR" />
    <result column="creat_time" property="creatTime" jdbcType="TIMESTAMP" />
    <result column="usr_name" property="usrName" jdbcType="VARCHAR"/>
  </resultMap>
  <resultMap id="DownLoadResultMap" type="com.beyond.algm.vo.AlgDataDownLoadVo" extends="BaseResultMap">
    <result column="down_load" property="downLoad" jdbcType="INTEGER" />
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from alg_data
    where data_sn = #{dataSn,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.beyond.algm.model.AlgData" >
    insert into alg_data (data_sn, data_set_sn, usr_sn, 
      data_name, data_en_name, creat_time, 
      data_size, data_addr, data_loc, 
      is_open_src, data_abs, data_content, 
      data_credit)
    values (#{dataSn,jdbcType=VARCHAR}, #{dataSetSn,jdbcType=VARCHAR}, #{usrSn,jdbcType=VARCHAR}, 
      #{dataName,jdbcType=VARCHAR}, #{dataEnName,jdbcType=VARCHAR}, #{creatTime,jdbcType=TIMESTAMP}, 
      #{dataSize,jdbcType=VARCHAR}, #{dataAddr,jdbcType=VARCHAR}, #{dataLoc,jdbcType=VARCHAR}, 
      #{isOpenSrc,jdbcType=VARCHAR}, #{dataAbs,jdbcType=VARCHAR}, #{dataContent,jdbcType=VARCHAR}, 
      #{dataCredit,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.beyond.algm.model.AlgData" >
    update alg_data
    set data_set_sn = #{dataSetSn,jdbcType=VARCHAR},
      usr_sn = #{usrSn,jdbcType=VARCHAR},
      data_name = #{dataName,jdbcType=VARCHAR},
      data_en_name = #{dataEnName,jdbcType=VARCHAR},
      creat_time = #{creatTime,jdbcType=TIMESTAMP},
      data_size = #{dataSize,jdbcType=VARCHAR},
      data_addr = #{dataAddr,jdbcType=VARCHAR},
      data_loc = #{dataLoc,jdbcType=VARCHAR},
      is_open_src = #{isOpenSrc,jdbcType=VARCHAR},
      data_abs = #{dataAbs,jdbcType=VARCHAR},
      data_content = #{dataContent,jdbcType=VARCHAR},
      data_credit = #{dataCredit,jdbcType=INTEGER}
    where data_sn = #{dataSn,jdbcType=VARCHAR}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select data_sn, data_set_sn, usr_sn, data_name, data_en_name, creat_time, data_size, 
    data_addr, data_loc, is_open_src, data_abs, data_content, data_credit
    from alg_data
    where data_sn = #{dataSn,jdbcType=VARCHAR}
  </select>
  <select id="queryAlgDatabySet" resultMap="BaseResultMap" parameterType="java.lang.String"  >
    select data_sn, data_set_sn, usr_sn, data_name, data_en_name, creat_time, data_size, 
    data_addr, data_loc, is_open_src, data_abs, data_content, data_credit
    from alg_data
    WHERE data_set_sn = #{dataSetSn,jdbcType=VARCHAR}
  </select>
  <select id="checkDataEnName" resultType="java.lang.Integer"  parameterType="java.lang.String"  >
    select count(*)
    from alg_data
    where usr_sn = #{arg0,jdbcType=VARCHAR}
    <if test="arg1 != null and arg1 !=''">and data_en_name = #{arg1,jdbcType=VARCHAR}</if>
  </select>
  <select id="dataCount" resultType="java.lang.Integer"  parameterType="java.lang.String">
    select COUNT(*)
    from alg_data
    where data_set_sn = #{dataSetSn,jdbcType=VARCHAR}
  </select>
  <select id="findDataList" resultMap="BaseResultMap">
    select a.data_sn as data_sn, a.data_set_sn as data_set_sn, a.usr_sn as usr_sn, a.data_name as data_name,
    a.data_en_name as data_en_name, a.creat_time as creat_time, a.data_size as data_size,a.data_addr as data_addr,
    a.data_loc as data_loc, a.is_open_src as is_open_src, a.data_abs as data_abs, a.data_content as data_content,
    a.data_credit as data_credit
    from alg_data a
    left join alg_data_set b on b.data_set_sn = a.data_set_sn
    where a.usr_sn = #{usrSn,jdbcType=VARCHAR}
    and b.data_orderby = (select max(data_orderby) maxodr from alg_data_set
    where usr_sn = #{usrSn,jdbcType=VARCHAR} group by usr_sn)
    and b.usr_sn = #{usrSn,jdbcType=VARCHAR}
  </select>
  <select id="findDifDataList" resultMap="DifDataResultMap">
    select da.data_name data_name,da.data_addr data_addr,da.creat_time creat_time,us.usr_name usr_name FROM alg_data da
     left join alg_data_ver ver on da.data_sn = ver.data_sn
     left join alg_module_version ion on ver.ver_sn = ion.ver_sn
     left join alg_module mo on ion.mod_sn = mo.mod_sn
     left join alg_article_list art on mo.atl_sn = art.id
     left join alg_data_set se on da.data_set_sn = se.data_set_sn
     left join alg_user us on se.usr_sn = us.usr_sn
    where  art.id = #{id,jdbcType=INTEGER}
  </select>
  <select id="findAlgDataMall" resultMap="DownLoadResultMap">
    select a.data_sn as data_sn, a.data_set_sn as data_set_sn, a.usr_sn as usr_sn, a.data_name as data_name,
    a.data_en_name as data_en_name, a.creat_time as creat_time, a.data_size as data_size,a.data_addr as data_addr,
    a.data_loc as data_loc, a.is_open_src as is_open_src, a.data_abs as data_abs, a.data_content as data_content,
    a.data_credit as data_credit,(select count(cc.data_sn) from
    alg_r_user_data_call_trans AS cc where cc.data_sn = a.data_sn ) as down_load
    from alg_data a
    <where>
      <if test="_parameter != null and _parameter !=''">
        data_name like concat('%',#{_parameter,jdbcType=VARCHAR},'%')
      </if>
      <if test="_parameter != null and _parameter !=''"> or
        data_content like concat('%',#{_parameter,jdbcType=VARCHAR},'%')
      </if>
    </where>
  </select>

  <select id="checkFileName" resultType="java.lang.Integer"  parameterType="com.beyond.algm.model.AlgData"  >
    select count(*)
    from alg_data
    where usr_sn = #{usrSn,jdbcType=VARCHAR}
    and data_set_sn=#{dataSetSn,jdbcType=VARCHAR}
    and data_name=#{dataName,jdbcType=VARCHAR}
  </select>

  <update id="update" parameterType="com.beyond.algm.model.AlgData" >
    update alg_data
    set
      creat_time = NOW(),
      data_size = #{dataSize,jdbcType=VARCHAR},
      data_addr = #{dataAddr,jdbcType=VARCHAR}
    where data_sn = #{dataSn,jdbcType=VARCHAR}
  </update>
  <select id="dataUrl" resultType="java.lang.String" parameterType="com.beyond.algm.model.AlgData" >
    select data_addr
    from alg_data
    where
         usr_sn = #{usrSn,jdbcType=VARCHAR}
        and data_name = #{dataName,jdbcType=VARCHAR}
  </select>


  <select id="dataSn" resultType="java.lang.String" parameterType="com.beyond.algm.vo.AlgDataVo" >
    select data_sn from alg_data
    where
    data_set_sn =(select data_set_sn from alg_data_set where usr_sn=#{usrSn,jdbcType=VARCHAR} AND data_set_name=#{dataSetName,jdbcType=VARCHAR})
    and data_name=#{dataName,jdbcType=VARCHAR}
  </select>
  <delete id="deleteData" parameterType="com.beyond.algm.model.AlgData" >
    delete from alg_data
    where data_sn = #{dataSn,jdbcType=VARCHAR}
    and usr_sn= #{usrSn,jdbcType=VARCHAR}
  </delete>
</mapper>